From 5627a97f7d20646ed77ca5fd7e08ef46d5e8f4dd Mon Sep 17 00:00:00 2001
From: Owen Barton <drupal@owenbarton.com>
Date: Mon, 22 Aug 2011 08:31:45 -0700
Subject: [PATCH] Strict private access setting for groups, which introduces intersection based access control for selected groups (verses the existing union based access control).

---
 og_access/og_access.module |  103 ++++++++++++++++++++++---------
 og_access/og_access.test   |  143 +++++++++++++++++++++++++++++++++++++-------
 2 files changed, 195 insertions(+), 51 deletions(-)

diff --git a/og_access/og_access.module b/og_access/og_access.module
index e46dff3..69b47a1 100644
--- a/og_access/og_access.module
+++ b/og_access/og_access.module
@@ -12,6 +12,12 @@
 define('OG_ACCESS_AUTHENTICATED_REALM', 'group_access_authenticated');
 
 /**
+ * The strict access realm of group member.
+ */
+define('OG_ACCESS_AUTHENTICATED_REALM_STRICT', 'group_access_authenticated_strict');
+
+
+/**
  * Group public access field.
  */
 define('OG_ACCESS_FIELD', 'group_access');
@@ -41,15 +47,21 @@ define('OG_CONTENT_ACCESS_PRIVATE', 2);
  * Implements hook_node_grants().
  */
 function og_access_node_grants($account, $op) {
-  $grants = array();
-  if ($op == 'view' && $groups = og_get_entity_groups('user', $account)) {
-    foreach ($groups as $gid => $value) {
-      // Not all the groups are nodes, but in order to save loading the groups
-      // we grant all group IDs.
+  $grants = $strict = array();
+  if ($op == 'view' && $gids = og_get_entity_groups('user', $account)) {
+    foreach ($gids as $gid => $value) {
+      $strict[] = OG_ACCESS_AUTHENTICATED_REALM_STRICT . '_' .$gid;
       $grants[OG_ACCESS_AUTHENTICATED_REALM][] = $gid;
     }
+    // Ensure the user has the access to all strictly controlled groups before
+    // adding grants for those. This query checks that for each node, the user
+    // has the same number of matching strict groups as the total number of
+    // strict groups for that node.
+    $result = db_query('SELECT DISTINCT realm, gid, expected_count FROM {node_access} na INNER JOIN (SELECT nid, count(*) AS expected_count FROM {node_access} WHERE realm LIKE :realm_wild GROUP BY nid) nae ON na.nid=nae.nid WHERE na.realm IN (:realms) GROUP BY na.nid HAVING count(*) = expected_count', array(':realms' => $strict, ':realm_wild' => OG_ACCESS_AUTHENTICATED_REALM_STRICT . '_%'));
+    foreach ($result as $record) {
+      $grants[$record->realm][] = $record->gid;
+    }
   }
-
   return $grants;
 }
 
@@ -61,25 +73,41 @@ function og_access_node_access_records($node) {
   $grants = array();
 
   // The group IDs, that in case access is granted, will be recorded.
-  $gids = array();
+  $gids = $strict = array();
 
   $access = FALSE;
+  if ($field = field_info_field(OG_ACCESS_FIELD)) {
+    // Access should be determined by its groups. If group content belongs
+    // to several groups, and one of them is private, then the group
+    // content will private as-well.
+    $gids = og_get_entity_groups('node', $node);
+
+    $groups = og_load_multiple($gids);
+    foreach ($groups as $gid => $group) {
+      $group = $group->getEntity();
+      if ($group->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] == 2) {
+        unset($gids[$gid]);
+        $strict[$gid] = $gid;
+        $access = TRUE;
+      }
+    }
+  }
+
   if (!empty($node->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value']) && $group = og_get_group('node', $node->nid)) {
-    // Group or group content that is explicitly set to be unpublic.
+    // Group node that is explicitly set to be non-public.
+    if ($node->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] == 1) {
+      $gids[] = $group->gid;
+    }
+    else if ($node->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] == 2) {
+      $strict[] = $group->gid;
+    }
     $access = TRUE;
-    $gids[] = $group->gid;
   }
   elseif (isset($node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'])) {
+    // Group content node.
     switch ($node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value']) {
       case OG_CONTENT_ACCESS_DEFAULT:
-        if ($field = field_info_field(OG_ACCESS_FIELD)) {
-          // Access should be determined by its groups. If group content belongs
-          // to several groups, and one of them is private, then the group
-          // content will private as-well.
-          $gids = og_get_entity_groups('node', $node);
-
-          $groups = og_load_multiple($gids);
-
+        if ($field) {
           // Get all groups under their entity.
           $list = array();
           foreach ($groups as $group) {
@@ -100,7 +128,7 @@ function og_access_node_access_records($node) {
             $count = $query
               ->entityCondition('entity_type', $entity_type)
               ->entityCondition('entity_id', $entity_gids, 'IN')
-              ->fieldCondition(OG_ACCESS_FIELD, 'value', 1, '=')
+              ->fieldCondition(OG_ACCESS_FIELD, 'value', array(1, 2), 'IN')
               ->count()
               ->execute();
 
@@ -140,16 +168,30 @@ function og_access_node_access_records($node) {
 
   //TODO: Add a case where the group has access field but group content doesn't.
 
-  if ($access && $gids) {
-    foreach ($gids as $gid) {
-      $grants[] = array (
-        'realm' => OG_ACCESS_AUTHENTICATED_REALM,
-        'gid' => $gid,
-        'grant_view' => 1,
-        'grant_update' => 0,
-        'grant_delete' => 0,
-        'priority' => 0,
-      );
+  if ($access && ($gids || $strict)) {
+    if (!empty($strict)) {
+      foreach ($strict as $gid) {
+        $grants[] = array (
+          'realm' => OG_ACCESS_AUTHENTICATED_REALM_STRICT . '_' . $gid,
+          'gid' => $node->nid,
+          'grant_view' => 1,
+          'grant_update' => 0,
+          'grant_delete' => 0,
+          'priority' => 0,
+        );
+      }
+    }
+    else {
+      foreach ($gids as $gid) {
+        $grants[] = array (
+          'realm' => OG_ACCESS_AUTHENTICATED_REALM,
+          'gid' => $gid,
+          'grant_view' => 1,
+          'grant_update' => 0,
+          'grant_delete' => 0,
+          'priority' => 0,
+        );
+      }
     }
   }
 
@@ -162,7 +204,8 @@ function og_access_node_access_records($node) {
 function og_access_og_fields_info() {
   $allowed_values = array(
     0 => 'Public - accessible to all site users',
-    1 =>  'Private - accessible only to group members',
+    1 =>  'Private - accessible only to group members of this or any selected groups (if any)',
+    2 =>  'Strict Private - accessible only to group members of this group and all selected strict private groups (if any)',
   );
   $items[OG_ACCESS_FIELD] = array(
     'type' => array('group'),
@@ -172,7 +215,7 @@ function og_access_og_fields_info() {
     'field' => array(
       'field_name' => OG_ACCESS_FIELD,
       'no_ui' => TRUE,
-      'type' => 'list_boolean',
+      'type' => 'list_integer',
       'cardinality' => 1,
       'settings' => array('allowed_values' => $allowed_values, 'allowed_values_function' => ''),
     ),
diff --git a/og_access/og_access.test b/og_access/og_access.test
index 8f14601..81f0e10 100644
--- a/og_access/og_access.test
+++ b/og_access/og_access.test
@@ -24,6 +24,16 @@ class OgAccessTestCase extends DrupalWebTestCase {
     node_access_rebuild();
   }
 
+  function ogCreateNode($type, $gids, $access) {
+    $settings = array();
+    $settings['type'] = $type;
+    foreach ($gids as $gid) {
+      $settings[OG_AUDIENCE_FIELD][LANGUAGE_NONE][]['gid'] = $gid;
+    }
+    $settings[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = $access;
+    return $this->drupalCreateNode($settings);
+  }
+
   /**
    * Group with access field .
    */
@@ -90,12 +100,7 @@ class OgAccessTestCase extends DrupalWebTestCase {
     $group = og_get_group('node', $group_node->nid);
 
     // Create a group content node and set default access.
-    $settings = array();
-    $settings['type'] = $group_content_type->type;
-    $settings[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['gid'] = $group->gid;
-    $settings[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_DEFAULT;
-
-    $group_content_node = $this->drupalCreateNode($settings);
+    $group_content_node = $this->ogCreateNode($group_content_type->type, array($group->gid), OG_CONTENT_ACCESS_DEFAULT);
 
     // Assert the user can view the group.
     // Assert the user is a group member.
@@ -145,15 +150,8 @@ class OgAccessTestCase extends DrupalWebTestCase {
       $group = og_get_group('node', $group_node->nid);
 
       // Create a group content node and set public access.
-      $settings = array();
-      $settings['type'] = $group_content_type->type;
-      $settings[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['gid'] = $group->gid;
-      $settings[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_PUBLIC;
-      $public_node = $this->drupalCreateNode($settings);
-
-      // Create a group content node and set private access.
-      $settings[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_PRIVATE;
-      $private_node = $this->drupalCreateNode($settings);
+      $public_node = $this->ogCreateNode($group_content_type->type, array($group->gid), OG_CONTENT_ACCESS_PUBLIC);
+      $private_node = $this->ogCreateNode($group_content_type->type, array($group->gid), OG_CONTENT_ACCESS_PRIVATE);
 
       // Assert the user can view the group.
       $this->assertTrue(og_is_member($group->gid, 'user', $user1), t('User is a group member.'));
@@ -206,12 +204,7 @@ class OgAccessTestCase extends DrupalWebTestCase {
     $group2 = og_get_group('node', $group_node2->nid);
 
     // Create a group content node and set default access.
-    $settings = array();
-    $settings['type'] = $group_content_type->type;
-    $settings[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['gid'] = $group1->gid;
-    $settings[OG_AUDIENCE_FIELD][LANGUAGE_NONE][1]['gid'] = $group2->gid;
-    $settings[OG_CONTENT_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_DEFAULT;
-    $node = $this->drupalCreateNode($settings);
+    $node = $this->ogCreateNode($group_content_type->type, array($group1->gid, $group2->gid), OG_CONTENT_ACCESS_DEFAULT);
 
     // Assert the user can view the group.
     $this->assertTrue(og_is_member($group1->gid, 'user', $user1), t('User is a group member.'));
@@ -246,4 +239,112 @@ class OgAccessTestCase extends DrupalWebTestCase {
     $this->assertEqual(count($records), 1, t('Returned the correct number of rows.'));
     $this->assertEqual($records[0]->realm, 'all', t('Grant realm is correct for public group content.'));
   }
+
+  /**
+   * Test "Strict private" groups.
+   *
+   *            Strict 1   Strict 2   Strict 3   Group 1
+   * User 1     1                                1
+   * User 2     1          1
+   * Node 1     1                                         private
+   * Node 2                1                              default
+   * Node 3                1                     1        default
+   * Node 4     1          1                              default
+   * Node 5                1          1                   public
+   *
+   * User 1 should have access to Node 1 and 6 only.
+   * User 2 should have access to Node 1, 2, 3, 4 and 6.
+   */
+  function testOgStrictPrivateGroups() {
+    $user1 = $this->drupalCreateUser();
+    $user2 = $this->drupalCreateUser();
+
+    // Create group and group content node types.
+    $group_type = $this->drupalCreateContentType();
+    og_create_field(OG_GROUP_FIELD, 'node', $group_type->type);
+    og_create_field(OG_ACCESS_FIELD, 'node', $group_type->type);
+
+    $group_content_type = $this->drupalCreateContentType();
+    og_create_field(OG_AUDIENCE_FIELD, 'node', $group_content_type->type);
+    og_create_field(OG_CONTENT_ACCESS_FIELD, 'node', $group_content_type->type);
+
+    // Create 3 strict group nodes, set as strict private.
+    $settings = array();
+    $settings['type'] = $group_type->type;
+    $settings[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
+    $settings[OG_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = 2;
+
+    $strict_node1 = $this->drupalCreateNode($settings);
+    $strict1 = og_get_group('node', $strict_node1->nid);
+    $strict_node2 = $this->drupalCreateNode($settings);
+    $strict2 = og_get_group('node', $strict_node2->nid);
+    $strict_node3 = $this->drupalCreateNode($settings);
+    $strict3 = og_get_group('node', $strict_node3->nid);
+
+    // Create a non-strict node and set as private.
+    $settings[OG_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = 1;
+    $nonstrict_node1 = $this->drupalCreateNode($settings);
+    $nonstrict1 = og_get_group('node', $nonstrict_node1->nid);
+
+    // Create group content nodes.
+    $node1 = $this->ogCreateNode($group_content_type->type, array($strict1->gid), OG_CONTENT_ACCESS_PRIVATE);
+    $node2 = $this->ogCreateNode($group_content_type->type, array($strict2->gid), OG_CONTENT_ACCESS_DEFAULT);
+    $node3 = $this->ogCreateNode($group_content_type->type, array($strict2->gid, $nonstrict1->gid), OG_CONTENT_ACCESS_DEFAULT);
+    $node4 = $this->ogCreateNode($group_content_type->type, array($strict1->gid, $strict2->gid), OG_CONTENT_ACCESS_DEFAULT);
+    $node5 = $this->ogCreateNode($group_content_type->type, array($strict2->gid, $strict3->gid), OG_CONTENT_ACCESS_PUBLIC);
+
+    // Create/assert group memberships.
+    og_group($strict1->gid, array('entity' => $user1));
+    og_group($nonstrict1->gid, array('entity' => $user1));
+    $this->assertTrue(og_is_member($strict1->gid, 'user', $user1), t('User1 is a strict1 member.'));
+    $this->assertTrue(og_is_member($nonstrict1->gid, 'user', $user1), t('User1 is a group1 member.'));
+    og_group($strict1->gid, array('entity' => $user2));
+    og_group($strict2->gid, array('entity' => $user2));
+    $this->assertTrue(og_is_member($strict1->gid, 'user', $user2), t('User2 is a strict1 member.'));
+    $this->assertTrue(og_is_member($strict2->gid, 'user', $user2), t('User2 is a strict2 member.'));
+
+    $this->drupalLogin($user1);
+    // Test group nodes for user1.
+    $this->drupalGet('node/' . $strict_node1->nid);
+    $this->assertResponse('200', t('User1 can view strict1 group node, as they are a group member.'));
+    $this->drupalGet('node/' . $strict_node2->nid);
+    $this->assertResponse('403', t('User1 can not view strict2 group node, as they are not a group member.'));
+    $this->drupalGet('node/' . $strict_node3->nid);
+    $this->assertResponse('403', t('User1 can not view strict3 group node, as they are not a group member.'));
+    $this->drupalGet('node/' . $nonstrict_node1->nid);
+    $this->assertResponse('200', t('User1 can view nonstrict1 group node, as they are a group member.'));
+    // Test group content nodes for user1.
+    $this->drupalGet('node/' . $node1->nid);
+    $this->assertResponse('200', t('User1 can view node with strict1 group membership, as they are a group member.'));
+    $this->drupalGet('node/' . $node2->nid);
+    $this->assertResponse('403', t('User1 can not view node with strict2 group membership, as they are not a member of the strict2 group.'));
+    $this->drupalGet('node/' . $node3->nid);
+    $this->assertResponse('403', t('User1 can not view node with strict2 and nonstrict1 group membership, even when a member of the nonstrict1 group.'));
+    $this->drupalGet('node/' . $node4->nid);
+    $this->assertResponse('403', t('User1 can not view node with strict1 and strict2 group membership, as they are not a member of the strict2 group.'));
+    $this->drupalGet('node/' . $node5->nid);
+    $this->assertResponse('403', t('User1 can not view public node with strict2 and strict3 group membership, as they are not a member of either group.'));
+
+    $this->drupalLogin($user2);
+    // Test group nodes for user2.
+    $this->drupalGet('node/' . $strict_node1->nid);
+    $this->assertResponse('200', t('User2 can view strict1 group node, as they are a group member.'));
+    $this->drupalGet('node/' . $strict_node2->nid);
+    $this->assertResponse('200', t('User2 can view strict2 group node, as they are a group member.'));
+    $this->drupalGet('node/' . $strict_node3->nid);
+    $this->assertResponse('403', t('User2 can not view strict3 group node, as they are not a group member.'));
+    $this->drupalGet('node/' . $nonstrict_node1->nid);
+    $this->assertResponse('403', t('User2 can not view nonstrict1 group node, as they are not a group member.'));
+    // Test group content nodes for user2.
+    $this->drupalGet('node/' . $node1->nid);
+    $this->assertResponse('200', t('User2 can view node with strict1 group membership, as they are a group member.'));
+    $this->drupalGet('node/' . $node2->nid);
+    $this->assertResponse('200', t('User2 can view node with strict2 group membership, as they are a group member.'));
+    $this->drupalGet('node/' . $node3->nid);
+    $this->assertResponse('200', t('User2 can view node with strict2 and nonstrict1 group membership, even when they are not member of the nonstrict1 group.'));
+    $this->drupalGet('node/' . $node4->nid);
+    $this->assertResponse('200', t('User2 can view node with strict1 and strict2 group membership, as they are a member of both groups.'));
+    $this->drupalGet('node/' . $node5->nid);
+    $this->assertResponse('403', t('User2 can not view public node with strict2 and strict3 group membership, as they are not a member of the strict3 group.'));
+  }
 }
\ No newline at end of file
-- 
1.7.1

